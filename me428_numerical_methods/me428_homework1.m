%Alan Tieng
%ME428 Numerical Methods
%Homework 1


%% 2.3
% Employing the binomial series generated by 1/(1 + x), where |x| < 1,
% compute the sum of the series, using a finite number of terms with a
% convergence criterion ε, as done in Example 2.1. Write an algorithm
% for the purpose and, using a calculator or a computer, study the effect
% of varying the convergence criterion on the numerical results.

close all;
clear all;
clc;

x = [0 0.1 0.3 0.5 0.7 0.9];
convergence = [10^-4 10^-5 10^-6 10^-7 10^-8];

for i = 1:length(x)
    for j = 1:length(convergence)
        S = 0;
        n = 0;
        while true
            SN = x(i)^n;
            if rem(n,2)==0
                S = S + SN;
            else
                S = S - SN;
            end
            
            %when difference between consecutive terms is < convergence,
            %break and iterate next convergence value
            if (SN/S > convergence(j))
                n = n+1;
            else
                %initialize N
                %N captures all min term values for all combinations
                if i==1 && j==1
                    N = n;
                end
                
                N = [N, n];
                disp("x = " + num2str(x(i)));
                disp("Convergence = " + num2str(convergence(j)));
                disp("# of terms = " + num2str(n));
                disp("Sum of series = " + num2str(S));
                SX = 1/(1-x(i));
                disp("Error = " + num2str(((SX-S)/SX)*100.0));
                disp(" ");
                break;
            end
            
            %break loop if series does not converge
            if n > 1000
                break;  
            end
        end 
    end   
end

% Demonstration of truncation error
dx = 0.0001;
x  = 0:dx:0.7;

f1 = 1 - x;
f2 = 1 - x + x.^2;
f3 = 1 - x + x.^2 - x.^3;
f4 = 1 - x + x.^2 - x.^3 + x.^4;
exact = 1./(1+x);

% Creation of figures
% Create figure
figure1 = figure;
% Create axes
axes1 = axes('Parent',figure1,'FontSize',10);
xlim(axes1,[0 0.7]);
ylim(axes1,[0 1.5]);
box(axes1,'on');
hold(axes1,'on');
% Create loglog
plot(x,f1,'LineWidth',2,'Color','r');
hold on;
plot(x,f2,'LineWidth',2,'Color',[.1 .9 .1]);
plot(x,f3,'LineWidth',2,'Color','b');
plot(x,f4,'LineWidth',2,'Color','cy');
plot(x,exact,'--','LineWidth',2,'Color','k');

legend('f(x)=1-x','f(x)=1-x+x^2','f(x)=1-x+x^2-x^3','f(x)=1-x+x^2-x^3+x^4','Exact','Location','best')
%legend('f(x)=1/(1+x)','Location','best')

%save the figure for powerpoint
%print('TE_example','-dpng','-r600')

disp("One term, x = 0.5: " + num2str(f1(5001)));
disp("Two terms, x = 0.5: " + num2str(f2(5001)));
disp("Three terms, x = 0.5: " + num2str(f3(5001)));
disp("Four terms, x = 0.5: " + num2str(f4(5001)));
disp("Exact, x = 0.5: " + num2str(exact(5001))); 

%% 2.12
% Determine the effect of varying Δx on the computed result for the second 
% derivative, as given in Problem 2.9, for the function f(x) = 5 + 10x – 
% 4x2 + 6x3. The second derivative is to be determined at x = 1. Using a 
% computer or a calculator, calculate the second derivative at x = 1 with 
% Δx = 0.5, 0.1, 0.05, and 0.01. Compare the results obtained with the 
% exact value of 28.

close all;
clear all;
clc;

%syms x 
step_sz = [0.5 0.1 0.05 0.01]; 
x = 1;
for i = 1:length(step_sz)
    a = (5 + 10*(x+step_sz(i)) - 4*(x+step_sz(i))^2 + 6*(x+step_sz(i))^3);
    b = 2 * (5 + 10*x - 4*x^2 + 6*x^3);
    c = (5 + 10*(x-step_sz(i)) - 4*(x-step_sz(i))^2 + 6*(x-step_sz(i))^3);
    dx2 = (a-b+c)/(step_sz(i)^2);
    disp("The second derivative at x = 1 for a step size of " + ...
        num2str(step_sz(i)) + " is: " + num2str(dx2));
    disp("The round off error is: " + num2str((dx2-28.0)/28));
    disp(" ");
    
end

% f1 = 5 + 10*x - 4*x^2 + 6*x^3; 
% for i = 1:length(step_sz)
%     dx2 = (subs(f1,x,1+step_sz(i))-2*subs(f1,x,1)+subs(f1,x,1-step_sz(i)))/...
%         (step_sz(i)^2);
%     disp("The second derivative at x = 1 for a step size of " + ...
%         num2str(step_sz(i)) + " is:");
%     disp(double(dx2))
% end

%% 2.14

clear all;
close all;
clc;

syms x
f = x^2;
step_sz = [2 1 0.5 0.1 0.05 0.01];
%step_sz = 0:0.01:2;
I = [0];
for i = 1:length(step_sz)
   
   for j = 0:step_sz(i):2-step_sz(i)
      I(i) = I(i) + subs(f,x,j)*step_sz(i);
   end
   if i<length(step_sz)
       I = [I 0];
   end
   disp("Step Size: " + num2str(step_sz(i)) + ", I = " + num2str(double(I(i))))
end
disp("Step Size: Exact, I = " + 8/3)

error = abs((I - 8/3)./(8/3));
plot(step_sz,error, 'LineStyle', ':', 'Marker', 'o', 'MarkerEdgeColor', 'r');
xlabel('Step Size');
ylabel('Error');
title('Error vs. Step Size');

%Based on the results, a step size of 0.01 is the best choice. As the step
%size decreases, the error does as well.